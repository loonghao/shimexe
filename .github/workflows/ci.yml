name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  security-events: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Run tests
      run: cargo test --all-features --workspace

    - name: Build
      run: cargo build --release --all-features

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: rustsec/audit-check@v2.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  release_plz_config_check:
    name: Release-plz Config Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref }}

    - name: Validate release-plz configuration file
      run: |
        echo "🔧 Validating release-plz configuration..."
        echo ""

        # Check if config file exists
        if [ -f "release-plz.toml" ]; then
          echo "✅ release-plz.toml found"
        else
          echo "❌ release-plz.toml not found"
          exit 1
        fi

        # Validate TOML syntax
        echo "🧪 Checking TOML syntax..."
        if command -v toml-cli &> /dev/null; then
          toml-cli get release-plz.toml . > /dev/null || {
            echo "❌ Invalid TOML syntax in release-plz.toml"
            exit 1
          }
        else
          # Basic syntax check using Python (available in GitHub runners)
          python3 -c "
        import tomllib
        try:
            with open('release-plz.toml', 'rb') as f:
                tomllib.load(f)
            print('✅ TOML syntax is valid')
        except Exception as e:
            print(f'❌ TOML syntax error: {e}')
            exit(1)
        " || exit 1
        fi

        echo ""
        echo "✅ Release-plz configuration validation completed!"
        echo "📝 Configuration file exists and has valid TOML syntax."
        echo "🎯 The workflow should work correctly when merged to main."
