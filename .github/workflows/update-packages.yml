name: Update Package Managers

# This workflow updates package manager configurations when a new release is created
# It updates Chocolatey and Scoop package definitions with new version and checksums

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update packages for (without v prefix)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-packages:
    name: Update Package Configurations
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          $version = "${{ github.event.release.tag_name }}" -replace "^v", ""
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Get file hashes
      id: get_hashes
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $baseUrl = "https://github.com/loonghao/shimexe/releases/download/v$version"

        # Get Windows x64 zip hash for Chocolatey and Scoop
        $zipUrl = "$baseUrl/shimexe-x86_64-pc-windows-msvc.zip"

        # Wait for the release to be available with retry logic
        $maxRetries = 10
        $retryCount = 0
        $zipHash = ""

        do {
          Start-Sleep -Seconds 30
          $retryCount++
          Write-Host "Attempt $retryCount of $maxRetries to download release..."

          try {
            $response = Invoke-WebRequest -Uri $zipUrl -Method Head -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              $tempFile = [System.IO.Path]::GetTempFileName()
              Invoke-WebRequest -Uri $zipUrl -OutFile $tempFile -UseBasicParsing
              $hash = Get-FileHash -Path $tempFile -Algorithm SHA256
              Remove-Item $tempFile -Force
              $zipHash = $hash.Hash

              echo "zip_hash=$zipHash" >> $env:GITHUB_OUTPUT
              echo "zip_url=$zipUrl" >> $env:GITHUB_OUTPUT
              Write-Host "Successfully downloaded and calculated checksum: $zipHash"
              break
            } else {
              Write-Warning "Attempt $retryCount failed: HTTP $($response.StatusCode)"
              if ($retryCount -eq $maxRetries) {
                Write-Error "Failed to get release after $maxRetries attempts"
                exit 1
              }
            }
          } catch {
            Write-Warning "Attempt $retryCount failed: $_"
            if ($retryCount -eq $maxRetries) {
              Write-Error "Failed to download release after $maxRetries attempts"
              exit 1
            }
          }
        } while ($retryCount -lt $maxRetries)

    - name: Update Chocolatey package
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipUrl = "${{ steps.get_hashes.outputs.zip_url }}"
        $zipHash = "${{ steps.get_hashes.outputs.zip_hash }}"
        
        # Update nuspec version
        $nuspecPath = "pkg/choco/shimexe.nuspec"
        $nuspecContent = Get-Content $nuspecPath -Raw
        $nuspecContent = $nuspecContent -replace '<version>[\d\.]+</version>', "<version>$version</version>"
        Set-Content -Path $nuspecPath -Value $nuspecContent -Encoding UTF8
        
        # Update install script
        $installScriptPath = "pkg/choco/tools/chocolateyinstall.ps1"
        $installScript = Get-Content $installScriptPath -Raw
        $installScript = $installScript -replace "url64 = 'https://github\.com/[^']+/releases/download/v[\d\.]+/[^']+\.zip'", "url64 = '$zipUrl'"
        $installScript = $installScript -replace "checksum64 = '[^']*'", "checksum64 = '$zipHash'"
        Set-Content -Path $installScriptPath -Value $installScript -Encoding UTF8
        
        echo "Updated Chocolatey package for version $version"

    - name: Update Scoop manifest
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipUrl = "${{ steps.get_hashes.outputs.zip_url }}"
        $zipHash = "${{ steps.get_hashes.outputs.zip_hash }}"
        
        # Update scoop manifest
        $scoopFile = "pkg/scoop/shimexe.json"
        $scoopContent = Get-Content $scoopFile -Raw | ConvertFrom-Json
        $scoopContent.version = $version
        $scoopContent.url = $zipUrl
        $scoopContent.hash = $zipHash
        
        # Update autoupdate URL template
        $scoopContent.autoupdate.url = "https://github.com/loonghao/shimexe/releases/download/v`$version/shimexe-x86_64-pc-windows-msvc.zip"
        
        $scoopContent | ConvertTo-Json -Depth 10 | Set-Content $scoopFile -Encoding UTF8
        
        echo "Updated Scoop manifest for version $version"

    - name: Commit and push changes
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add pkg/choco/shimexe.nuspec
        git add pkg/choco/tools/chocolateyinstall.ps1
        git add pkg/scoop/shimexe.json
        
        if (git diff --staged --quiet) {
          echo "No changes to commit"
        } else {
          git commit -m "chore: update package managers for v$version"
          git push
          echo "Committed and pushed package updates"
        }

    - name: Publish to Chocolatey
      if: github.event_name == 'release'
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipUrl = "${{ steps.get_hashes.outputs.zip_url }}"
        $zipHash = "${{ steps.get_hashes.outputs.zip_hash }}"

        # Copy package files to working directory
        Copy-Item -Path "pkg/choco" -Destination "chocolatey" -Recurse

        # Update version in nuspec
        $nuspecPath = "chocolatey/shimexe.nuspec"
        $nuspecContent = Get-Content $nuspecPath -Raw
        $nuspecContent = $nuspecContent -replace '<version>[\d\.]+</version>', "<version>$version</version>"
        Set-Content -Path $nuspecPath -Value $nuspecContent -Encoding UTF8

        # Update install script
        $installScriptPath = "chocolatey/tools/chocolateyinstall.ps1"
        $installScript = Get-Content $installScriptPath -Raw
        $installScript = $installScript -replace "url64 = 'https://github\.com/[^']+/releases/download/v[\d\.]+/[^']+\.zip'", "url64 = '$zipUrl'"
        $installScript = $installScript -replace "checksum64 = '[^']*'", "checksum64 = '$zipHash'"
        Set-Content -Path $installScriptPath -Value $installScript -Encoding UTF8

        echo "Prepared Chocolatey package for version $version"

    - name: Pack Chocolatey Package
      if: github.event_name == 'release'
      uses: crazy-max/ghaction-chocolatey@v3.3.0
      with:
        args: pack chocolatey/shimexe.nuspec

    - name: Push to Chocolatey
      if: github.event_name == 'release' && env.CHOCOLATEY_API_KEY != ''
      uses: crazy-max/ghaction-chocolatey@v3.3.0
      with:
        args: push chocolatey/shimexe.${{ steps.get_version.outputs.version }}.nupkg --source https://push.chocolatey.org/ --api-key ${{ env.CHOCOLATEY_API_KEY }}
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

    - name: Create Scoop PR (if needed)
      if: github.event_name == 'release'
      run: |
        echo "Scoop manifest updated in pkg/scoop/shimexe.json"
        echo "To publish to Scoop:"
        echo "1. Fork https://github.com/ScoopInstaller/Extras"
        echo "2. Copy pkg/scoop/shimexe.json to bucket/shimexe.json"
        echo "3. Submit a PR to ScoopInstaller/Extras"
        echo ""
        echo "Or add to your own Scoop bucket and users can install with:"
        echo "scoop bucket add your-bucket https://github.com/your-username/your-bucket"
        echo "scoop install shimexe"
