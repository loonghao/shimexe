name: Release

# This workflow handles release-please automation and publishing
# It creates releases when changes are pushed to main, and publishes binaries when releases are created
on:
  workflow_dispatch:

permissions:
  contents: write # Required for creating releases and uploading artifacts
  pull-requests: write # Required for release-please
  issues: write # Required for release-please
  id-token: write # Required for trusted publishing

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  # First job: Run release-please to create releases and tags
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      releases_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - name: "Cleanup stale 'autorelease: pending' labels on merged PRs"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const q = `repo:${owner}/${repo} label:\"autorelease: pending\" is:pr is:merged`;
            const resp = await github.rest.search.issuesAndPullRequests({ q });
            for (const pr of resp.data.items || []) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pr.number,
                  name: 'autorelease: pending',
                });
                core.info(`Removed 'autorelease: pending' from #${pr.number}`);
              } catch (e) {
                core.warning(`Label cleanup failed for #${pr.number}: ${e.message}`);
              }
            }
      - name: Run release-please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # moved to release-assets.yml
  # upload-assets: {}

  # moved to package-publish.yml
  # publish-packages: {}

  # moved to package-publish.yml or separate chocolatey workflow
  # publish-chocolatey: {}

  update-package-managers:
    name: Update package managers
    needs: [release-please, upload-assets]
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout shimexe
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Calculate file hashes
        id: hashes
        run: |
          # Function to get file hash from GitHub release
          get_hash() {
            local file_url="https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/$1"
            echo "Getting hash for: $file_url"
            curl -sL "$file_url" | sha256sum | cut -d' ' -f1
          }

          # Calculate hashes for all platforms
          WIN_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip")
          WIN_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip")
          MAC_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.xz")
          MAC_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.xz")
          LINUX_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.tar.xz")
          LINUX_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-unknown-linux-gnu.tar.xz")

          # Output hashes
          echo "win_x64_hash=$WIN_X64_HASH" >> $GITHUB_OUTPUT
          echo "win_arm64_hash=$WIN_ARM64_HASH" >> $GITHUB_OUTPUT
          echo "mac_x64_hash=$MAC_X64_HASH" >> $GITHUB_OUTPUT
          echo "mac_arm64_hash=$MAC_ARM64_HASH" >> $GITHUB_OUTPUT
          echo "linux_x64_hash=$LINUX_X64_HASH" >> $GITHUB_OUTPUT
          echo "linux_arm64_hash=$LINUX_ARM64_HASH" >> $GITHUB_OUTPUT

      - name: Update Scoop bucket
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Clone scoop bucket
          git clone https://github.com/loonghao/scoop-bucket.git
          cd scoop-bucket

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Update shimexe manifest with version and hashes
          cat > bucket/shimexe.json << EOF
          {
              "version": "${{ steps.version.outputs.version }}",
              "description": "The Modern Executable Shim Manager - Transform any executable into a smart, portable shim with HTTP download support",
              "homepage": "https://github.com/loonghao/shimexe",
              "license": "MIT",
              "architecture": {
                  "64bit": {
                      "url": "https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip",
                      "hash": "${{ steps.hashes.outputs.win_x64_hash }}",
                      "extract_dir": "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc"
                  },
                  "arm64": {
                      "url": "https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip",
                      "hash": "${{ steps.hashes.outputs.win_arm64_hash }}",
                      "extract_dir": "shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc"
                  }
              },
              "bin": "shimexe.exe",
              "checkver": {
                  "github": "https://github.com/loonghao/shimexe"
              },
              "autoupdate": {
                  "architecture": {
                      "64bit": {
                          "url": "https://github.com/loonghao/shimexe/releases/download/v\$version/shimexe-\$version-x86_64-pc-windows-msvc.zip",
                          "extract_dir": "shimexe-\$version-x86_64-pc-windows-msvc"
                      },
                      "arm64": {
                          "url": "https://github.com/loonghao/shimexe/releases/download/v\$version/shimexe-\$version-aarch64-pc-windows-msvc.zip",
                          "extract_dir": "shimexe-\$version-aarch64-pc-windows-msvc"
                      }
                  }
              },
              "notes": [
                  "shimexe has been installed successfully!",
                  "",
                  "Quick start:",
                  "  shimexe init --examples",
                  "  shimexe add mytool --path https://example.com/tool.exe",
                  "",
                  "For more information, visit: https://github.com/loonghao/shimexe"
              ]
          }
          EOF

          # Commit and push if changes
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add bucket/shimexe.json
            git commit -m "chore: update shimexe to v${{ steps.version.outputs.version }}

          - Update version to ${{ steps.version.outputs.version }}
          - Update download URLs and file hashes
          - Automatic update from release workflow"
            git push
          fi

      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Clone homebrew tap
          git clone https://github.com/loonghao/homebrew-tap.git
          cd homebrew-tap

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Update shimexe formula with version and hashes
          cat > Formula/shimexe.rb << 'EOF'
          class Shimexe < Formula
            desc "The Modern Executable Shim Manager"
            homepage "https://github.com/loonghao/shimexe"
            version "${{ steps.version.outputs.version }}"
            license "MIT"

            if OS.mac?
              if Hardware::CPU.arm?
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-aarch64-apple-darwin.tar.xz"
                sha256 "${{ steps.hashes.outputs.mac_arm64_hash }}"
              else
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-x86_64-apple-darwin.tar.xz"
                sha256 "${{ steps.hashes.outputs.mac_x64_hash }}"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-aarch64-unknown-linux-gnu.tar.xz"
                sha256 "${{ steps.hashes.outputs.linux_arm64_hash }}"
              else
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-x86_64-unknown-linux-gnu.tar.xz"
                sha256 "${{ steps.hashes.outputs.linux_x64_hash }}"
              end
            end

            def install
              bin.install "shimexe"

              # Install shell completions if available
              if (buildpath/"completions").exist?
                bash_completion.install "completions/shimexe.bash" => "shimexe"
                zsh_completion.install "completions/_shimexe"
                fish_completion.install "completions/shimexe.fish"
              end

              # Install man page if available
              if (buildpath/"man").exist?
                man1.install "man/shimexe.1"
              end
            end

            test do
              system "#{bin}/shimexe", "--version"
              system "#{bin}/shimexe", "--help"

              # Test basic functionality
              system "#{bin}/shimexe", "init"
              assert_predicate testpath/".shimexe", :exist?
            end
          end
          EOF

          # Commit and push if changes
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add Formula/shimexe.rb
            git commit -m "chore: update shimexe to v${{ steps.version.outputs.version }}

          - Update version to ${{ steps.version.outputs.version }}
          - Update download URLs and file hashes
          - Automatic update from release workflow"
            git push
          fi

