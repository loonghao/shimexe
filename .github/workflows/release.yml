name: Release

# This workflow handles binary releases and distribution
# - Triggered by tag pushes (v*) or release events
# - Builds cross-platform binaries and uploads to GitHub releases
# - Publishes to Chocolatey package manager
#
# Note: Crates.io publishing is handled by release-plz.yml workflow

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        type: string
      upload_url:
        description: 'Upload URL for the release'
        required: false
        type: string

permissions:
  contents: write
  actions: read
  id-token: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
    - uses: actions/checkout@v4

    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ]; then
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release (if not exists)
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      with:
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        name: Release ${{ steps.get_tag.outputs.tag_name }}
        body: |
          Release ${{ steps.get_tag.outputs.tag_name }}

          ## Changes
          See [CHANGELOG.md](https://github.com/loonghao/shimexe/blob/main/CHANGELOG.md) for details.

          ## Downloads
          - **Windows**: shimexe-windows-x86_64.exe
          - **Linux**: shimexe-linux-x86_64 or shimexe-linux-x86_64-musl
          - **macOS**: shimexe-macos-x86_64 or shimexe-macos-aarch64
        draft: false
        prerelease: false
        generate_release_notes: true
        append_body: true
        # Don't fail if release already exists (created by release-plz)
        fail_on_unmatched_files: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: shimexe
            asset_name: shimexe-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: shimexe
            asset_name: shimexe-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: shimexe.exe
            asset_name: shimexe-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: shimexe
            asset_name: shimexe-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: shimexe
            asset_name: shimexe-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Install ImageMagick (Windows)
      if: runner.os == 'Windows'
      run: |
        winget install ImageMagick.ImageMagick
        $env:PATH += ";C:\Program Files\ImageMagick-7.1.1-Q16-HDRI"
        echo "C:\Program Files\ImageMagick-7.1.1-Q16-HDRI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install ImageMagick (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y imagemagick

    - name: Install ImageMagick (macOS)
      if: runner.os == 'macOS'
      run: brew install imagemagick

    - name: Build
      run: cargo build --release --target ${{ matrix.target }} --bin shimexe
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}



  chocolatey:
    name: Publish to Chocolatey
    needs: [create-release, build-and-upload]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    
    - name: Create Chocolatey Package
      run: |
        # Get version from tag name, removing 'v' prefix
        $version = "${{ needs.create-release.outputs.tag_name }}" -replace "^v", ""
        mkdir chocolatey
        cd chocolatey
        
        # Create nuspec file
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
          <metadata>
            <id>shimexe</id>
            <version>$version</version>
            <title>shimexe</title>
            <authors>Hal</authors>
            <owners>loonghao</owners>
            <licenseUrl>https://github.com/loonghao/shimexe/blob/main/LICENSE</licenseUrl>
            <projectUrl>https://github.com/loonghao/shimexe</projectUrl>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <description>A modern, cross-platform executable shim manager with environment variable expansion and TOML configuration support</description>
            <summary>Cross-platform executable shim manager</summary>
            <tags>shim executable wrapper cross-platform cli</tags>
          </metadata>
          <files>
            <file src="tools\**" target="tools" />
          </files>
        </package>
        "@ | Out-File -FilePath "shimexe.nuspec" -Encoding UTF8
        
        # Create tools directory and install script
        mkdir tools
        @"
        `$ErrorActionPreference = 'Stop'
        `$packageName = 'shimexe'
        `$url64 = 'https://github.com/loonghao/shimexe/releases/download/v$version/shimexe-windows-x86_64.exe'
        `$checksum64 = ''
        
        `$packageArgs = @{
          packageName   = `$packageName
          fileType      = 'exe'
          url64bit      = `$url64
          checksum64    = `$checksum64
          checksumType64= 'sha256'
          silentArgs    = ''
          validExitCodes= @(0)
          softwareName  = 'shimexe*'
          destination   = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
        }
        
        Install-ChocolateyZipPackage @packageArgs
        "@ | Out-File -FilePath "tools\chocolateyinstall.ps1" -Encoding UTF8
        
        choco pack
    
    - name: Push to Chocolatey
      run: |
        cd chocolatey
        choco push shimexe.*.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}
