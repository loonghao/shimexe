name: Release

on:
  push:
    tags:
      - "v*"

# We need this to be able to create releases.
permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  upload-assets:
    name: Upload release assets
    # Only run if this is a shimexe release (not other packages in workspace)
    if: startsWith(github.ref_name, 'v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-13
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: aarch64-pc-windows-msvc
            os: windows-2022
    timeout-minutes: 60
    steps:
      - name: Debug release info
        run: |
          echo "Tag: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: shimexe
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    name: Publish to package managers
    needs: upload-assets
    runs-on: ubuntu-22.04
    if: startsWith(github.ref_name, 'v')
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Setup Node.js (for jq)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for release assets
        run: |
          echo "Waiting for release assets to be available..."
          sleep 30

          # Check if all expected assets are available
          EXPECTED_ASSETS=(
            "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip"
            "shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip"
            "shimexe-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.xz"
            "shimexe-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.xz"
            "shimexe-${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.tar.xz"
            "shimexe-${{ steps.version.outputs.version }}-aarch64-unknown-linux-gnu.tar.xz"
          )

          for asset in "${EXPECTED_ASSETS[@]}"; do
            echo "Checking for asset: $asset"
            curl -f -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
              | jq -r '.assets[].name' | grep -q "$asset" || {
                echo "Asset $asset not found, waiting..."
                sleep 10
              }
          done

      - name: Publish to Scoop bucket
        if: vars.SCOOP_BUCKET_REPO != ''
        run: |
          chmod +x scripts/publish-packages.sh
          ./scripts/publish-packages.sh \
            --version "${{ steps.version.outputs.version }}" \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --publish-scoop \
            --scoop-bucket-repo "${{ vars.SCOOP_BUCKET_REPO }}"

      - name: Publish to Homebrew tap
        if: vars.HOMEBREW_TAP_REPO != ''
        run: |
          chmod +x scripts/publish-packages.sh
          ./scripts/publish-packages.sh \
            --version "${{ steps.version.outputs.version }}" \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --publish-homebrew \
            --homebrew-tap-repo "${{ vars.HOMEBREW_TAP_REPO }}"



      - name: Update local package files
        run: |
          # Update local package manifests with new version and hashes
          chmod +x scripts/publish-packages.sh
          ./scripts/publish-packages.sh \
            --version "${{ steps.version.outputs.version }}" \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --dry-run

      - name: Create PR for package updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update package manifests to v${{ steps.version.outputs.version }}"
          title: "chore: update package manifests to v${{ steps.version.outputs.version }}"
          body: |
            This PR updates the local package manifests with the new version and asset hashes.

            Changes:
            - Updated Scoop manifest with new version and hashes
            - Updated Homebrew formula with new version and hashes
            - Updated Chocolatey template with new version

            This is an automated PR created after the release workflow.
          branch: "update-packages-v${{ steps.version.outputs.version }}"
          delete-branch: true

  publish-chocolatey:
    name: Publish to Chocolatey
    needs: upload-assets
    runs-on: windows-2022
    if: startsWith(github.ref_name, 'v')
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}" -replace '^v', ''
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          Write-Host "Version: $VERSION"

      - name: Wait for release assets
        shell: pwsh
        run: |
          Write-Host "Waiting for release assets to be available..."
          Start-Sleep -Seconds 30

          $expectedAssets = @(
            "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip"
          )

          foreach ($asset in $expectedAssets) {
            Write-Host "Checking for asset: $asset"
            $headers = @{
              "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
              "Accept" = "application/vnd.github.v3+json"
            }

            $release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" -Headers $headers
            $assetExists = $release.assets | Where-Object { $_.name -eq $asset }

            if (-not $assetExists) {
              Write-Host "Asset $asset not found, waiting..."
              Start-Sleep -Seconds 10
            }
          }

      - name: Setup Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Publish Chocolatey package
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          if (-not $env:CHOCOLATEY_API_KEY) {
            Write-Host "CHOCOLATEY_API_KEY not set, skipping Chocolatey publishing"
            exit 0
          }
          .\scripts\publish-packages-enhanced.ps1 `
            -Version "${{ steps.version.outputs.version }}" `
            -GitHubToken "${{ secrets.GITHUB_TOKEN }}" `
            -PublishChocolatey `
            -ChocolateyApiKey $env:CHOCOLATEY_API_KEY

