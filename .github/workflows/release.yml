name: Release

# This workflow handles binary releases and distribution
# - Triggered by tag pushes (v*) or release events
# - Builds cross-platform binaries and uploads to GitHub releases
# - Uses houseabsolute/actions-rust-release for simplified release management
#
# Note: Crates.io publishing is handled by release-plz.yml workflow

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  id-token: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    strategy:
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - os_name: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - os_name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin

          - os_name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install musl tools
        if: matrix.platform.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Install ImageMagick (Windows)
        if: runner.os == 'Windows'
        run: |
          winget install ImageMagick.ImageMagick
          $env:PATH += ";C:\Program Files\ImageMagick-7.1.1-Q16-HDRI"
          echo "C:\Program Files\ImageMagick-7.1.1-Q16-HDRI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install ImageMagick (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y imagemagick

      - name: Install ImageMagick (macOS)
        if: runner.os == 'macOS'
        run: brew install imagemagick

      - name: Build executable
        run: cargo build --release --target ${{ matrix.platform.target }} --bin shimexe

      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: shimexe
          target: ${{ matrix.platform.target }}
          changes-file: CHANGELOG.md
          extra-files: |
            README.md
            README_zh.md
            LICENSE



  chocolatey:
    name: Publish to Chocolatey
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        $version = "${{ github.ref_name }}" -replace "^v", ""
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Setup Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    - name: Create Chocolatey Package
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        mkdir chocolatey
        cd chocolatey

        # Create nuspec file
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
          <metadata>
            <id>shimexe</id>
            <version>$version</version>
            <title>shimexe</title>
            <authors>Hal</authors>
            <owners>loonghao</owners>
            <licenseUrl>https://github.com/loonghao/shimexe/blob/main/LICENSE</licenseUrl>
            <projectUrl>https://github.com/loonghao/shimexe</projectUrl>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <description>A modern, cross-platform executable shim manager with environment variable expansion and TOML configuration support</description>
            <summary>Cross-platform executable shim manager</summary>
            <tags>shim executable wrapper cross-platform cli</tags>
          </metadata>
          <files>
            <file src="tools\**" target="tools" />
          </files>
        </package>
        "@ | Out-File -FilePath "shimexe.nuspec" -Encoding UTF8

        # Create tools directory and install script
        mkdir tools
        @"
        `$ErrorActionPreference = 'Stop'
        `$packageName = 'shimexe'
        `$url64 = 'https://github.com/loonghao/shimexe/releases/download/v$version/shimexe-x86_64-pc-windows-msvc.zip'
        `$checksum64 = ''

        `$packageArgs = @{
          packageName   = `$packageName
          fileType      = 'zip'
          url64bit      = `$url64
          checksum64    = `$checksum64
          checksumType64= 'sha256'
          silentArgs    = ''
          validExitCodes= @(0)
          softwareName  = 'shimexe*'
          destination   = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
        }

        Install-ChocolateyZipPackage @packageArgs
        "@ | Out-File -FilePath "tools\chocolateyinstall.ps1" -Encoding UTF8

        choco pack

    - name: Push to Chocolatey
      if: env.CHOCOLATEY_API_KEY != ''
      run: |
        cd chocolatey
        choco push shimexe.*.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
