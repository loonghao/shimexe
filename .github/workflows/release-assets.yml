name: Release Assets

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  upload-assets:
    name: Upload release assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-13
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: aarch64-pc-windows-msvc
            os: windows-2022
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: shimexe
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}


  update-package-managers:
    name: Update package managers
    needs: [upload-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_REF_NAME}"; fi
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"

      - name: Calculate file hashes
        id: hashes
        shell: bash
        run: |
          set -euo pipefail
          get_hash() {
            local file_url="https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/$1"
            echo "Getting hash for: $file_url"
            curl -sL "$file_url" | sha256sum | cut -d' ' -f1
          }

          WIN_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip")
          WIN_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip")
          MAC_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.xz")
          MAC_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.xz")
          LINUX_X64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.tar.xz")
          LINUX_ARM64_HASH=$(get_hash "shimexe-${{ steps.version.outputs.version }}-aarch64-unknown-linux-gnu.tar.xz")

          {
            echo "win_x64_hash=$WIN_X64_HASH"
            echo "win_arm64_hash=$WIN_ARM64_HASH"
            echo "mac_x64_hash=$MAC_X64_HASH"
            echo "mac_arm64_hash=$MAC_ARM64_HASH"
            echo "linux_x64_hash=$LINUX_X64_HASH"
            echo "linux_arm64_hash=$LINUX_ARM64_HASH"
          } >> "$GITHUB_OUTPUT"

      - name: Update Scoop bucket
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          git clone https://github.com/loonghao/scoop-bucket.git
          cd scoop-bucket
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          cat > bucket/shimexe.json << EOF
          {
              "version": "${{ steps.version.outputs.version }}",
              "description": "The Modern Executable Shim Manager - Transform any executable into a smart, portable shim with HTTP download support",
              "homepage": "https://github.com/loonghao/shimexe",
              "license": "MIT",
              "architecture": {
                  "64bit": {
                      "url": "https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip",
                      "hash": "${{ steps.hashes.outputs.win_x64_hash }}",
                      "extract_dir": "shimexe-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc"
                  },
                  "arm64": {
                      "url": "https://github.com/loonghao/shimexe/releases/download/v${{ steps.version.outputs.version }}/shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip",
                      "hash": "${{ steps.hashes.outputs.win_arm64_hash }}",
                      "extract_dir": "shimexe-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc"
                  }
              },
              "bin": "shimexe.exe",
              "checkver": {
                  "github": "https://github.com/loonghao/shimexe"
              },
              "autoupdate": {
                  "architecture": {
                      "64bit": {
                          "url": "https://github.com/loonghao/shimexe/releases/download/v\$version/shimexe-\$version-x86_64-pc-windows-msvc.zip",
                          "extract_dir": "shimexe-\$version-x86_64-pc-windows-msvc"
                      },
                      "arm64": {
                          "url": "https://github.com/loonghao/shimexe/releases/download/v\$version/shimexe-\$version-aarch64-pc-windows-msvc.zip",
                          "extract_dir": "shimexe-\$version-aarch64-pc-windows-msvc"
                      }
                  }
              },
              "notes": [
                  "shimexe has been installed successfully!",
                  "",
                  "Quick start:",
                  "  shimexe init --examples",
                  "  shimexe add mytool --path https://example.com/tool.exe",
                  "",
                  "For more information, visit: https://github.com/loonghao/shimexe"
              ]
          }
          EOF

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add bucket/shimexe.json
            git commit -m "chore: update shimexe to v${{ steps.version.outputs.version }}

          - Update version to ${{ steps.version.outputs.version }}
          - Update download URLs and file hashes
          - Automatic update from release workflow"
            git push
          fi

      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          git clone https://github.com/loonghao/homebrew-tap.git
          cd homebrew-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          cat > Formula/shimexe.rb << 'EOF'
          class Shimexe < Formula
            desc "The Modern Executable Shim Manager"
            homepage "https://github.com/loonghao/shimexe"
            version "${{ steps.version.outputs.version }}"
            license "MIT"

            if OS.mac?
              if Hardware::CPU.arm?
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-aarch64-apple-darwin.tar.xz"
                sha256 "${{ steps.hashes.outputs.mac_arm64_hash }}"
              else
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-x86_64-apple-darwin.tar.xz"
                sha256 "${{ steps.hashes.outputs.mac_x64_hash }}"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-aarch64-unknown-linux-gnu.tar.xz"
                sha256 "${{ steps.hashes.outputs.linux_arm64_hash }}"
              else
                url "https://github.com/loonghao/shimexe/releases/download/v#{version}/shimexe-#{version}-x86_64-unknown-linux-gnu.tar.xz"
                sha256 "${{ steps.hashes.outputs.linux_x64_hash }}"
              end
            end

            def install
              bin.install "shimexe"

              if (buildpath/"completions").exist?
                bash_completion.install "completions/shimexe.bash" => "shimexe"
                zsh_completion.install "completions/_shimexe"
                fish_completion.install "completions/shimexe.fish"
              end

              if (buildpath/"man").exist?
                man1.install "man/shimexe.1"
              end
            end

            test do
              system "#{bin}/shimexe", "--version"
              system "#{bin}/shimexe", "--help"
              system "#{bin}/shimexe", "init"
              assert_predicate testpath/".shimexe", :exist?
            end
          end
          EOF

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add Formula/shimexe.rb
            git commit -m "chore: update shimexe to v${{ steps.version.outputs.version }}

          - Update version to ${{ steps.version.outputs.version }}
          - Update download URLs and file hashes
          - Automatic update from release workflow"
            git push
          fi
